---
source: interactive-clap-derive/src/tests/test_simple_struct.rs
expression: pretty_codegen(&interactive_clap_codegen)
---
#[derive(Debug, Default, Clone, clap::Parser, interactive_clap::ToCliArgs)]
#[clap(author, version, about, long_about = None)]
pub struct CliArgs {
    /// short first field description
    ///
    /// a longer paragraph, describing the usage and stuff with first field's
    /// awarenes of its possible applications
    #[clap(long)]
    pub first_field: Option<<u64 as interactive_clap::ToCli>::CliVariant>,
    /// short second field description
    ///
    /// a longer paragraph, describing the usage and stuff with second field's
    /// awareness of its possible applications
    #[clap(long, verbatim_doc_comment)]
    pub second_field: Option<<String as interactive_clap::ToCli>::CliVariant>,
    /// short third field description
    ///
    /// a longer paragraph, describing the usage and stuff with third field's
    /// awareness of its possible applications
    #[clap(long, verbatim_doc_comment)]
    pub third_field: bool,
}
impl interactive_clap::ToCli for Args {
    type CliVariant = CliArgs;
}
impl Args {
    pub fn try_parse() -> Result<CliArgs, clap::Error> {
        <CliArgs as clap::Parser>::try_parse()
    }
    pub fn parse() -> CliArgs {
        <CliArgs as clap::Parser>::parse()
    }
    pub fn try_parse_from<I, T>(itr: I) -> Result<CliArgs, clap::Error>
    where
        I: ::std::iter::IntoIterator<Item = T>,
        T: ::std::convert::Into<::std::ffi::OsString> + ::std::clone::Clone,
    {
        <CliArgs as clap::Parser>::try_parse_from(itr)
    }
}
impl From<Args> for CliArgs {
    fn from(args: Args) -> Self {
        Self {
            first_field: Some(args.first_field.into()),
            second_field: Some(args.second_field.into()),
            third_field: args.third_field.into(),
        }
    }
}
impl Args {}
pub struct InteractiveClapContextScopeForArgs {
    pub first_field: u64,
    pub second_field: String,
    pub third_field: bool,
}
impl interactive_clap::ToInteractiveClapContextScope for Args {
    type InteractiveClapContextScope = InteractiveClapContextScopeForArgs;
}
impl interactive_clap::FromCli for Args {
    type FromCliContext = ();
    type FromCliError = color_eyre::eyre::Error;
    fn from_cli(
        optional_clap_variant: Option<<Self as interactive_clap::ToCli>::CliVariant>,
        context: Self::FromCliContext,
    ) -> interactive_clap::ResultFromCli<
        <Self as interactive_clap::ToCli>::CliVariant,
        Self::FromCliError,
    >
    where
        Self: Sized + interactive_clap::ToCli,
    {
        let mut clap_variant = optional_clap_variant.clone().unwrap_or_default();
        let first_field = clap_variant.first_field.clone();
        let second_field = clap_variant.second_field.clone();
        let third_field = clap_variant.third_field.clone();
        let new_context_scope = InteractiveClapContextScopeForArgs {
            first_field: first_field.into(),
            second_field: second_field.into(),
            third_field: third_field.into(),
        };
        interactive_clap::ResultFromCli::Ok(clap_variant)
    }
}

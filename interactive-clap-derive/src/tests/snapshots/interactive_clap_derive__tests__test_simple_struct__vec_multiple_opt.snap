---
source: interactive-clap-derive/src/tests/test_simple_struct.rs
expression: pretty_codegen(&interactive_clap_codegen)
---
#[derive(Debug, Default, Clone, clap::Parser, interactive_clap::ToCliArgs)]
#[clap(author, version, about, long_about = None)]
pub struct CliArgs {
    #[clap(long)]
    pub env: Vec<String>,
}
impl interactive_clap::ToCli for Args {
    type CliVariant = CliArgs;
}
impl Args {
    pub fn try_parse() -> Result<CliArgs, clap::Error> {
        <CliArgs as clap::Parser>::try_parse()
    }
    pub fn parse() -> CliArgs {
        <CliArgs as clap::Parser>::parse()
    }
    pub fn try_parse_from<I, T>(itr: I) -> Result<CliArgs, clap::Error>
    where
        I: ::std::iter::IntoIterator<Item = T>,
        T: ::std::convert::Into<::std::ffi::OsString> + ::std::clone::Clone,
    {
        <CliArgs as clap::Parser>::try_parse_from(itr)
    }
}
impl From<Args> for CliArgs {
    fn from(args: Args) -> Self {
        Self { env: args.env.into() }
    }
}
impl Args {}
pub struct InteractiveClapContextScopeForArgs {
    pub env: Vec<String>,
}
impl interactive_clap::ToInteractiveClapContextScope for Args {
    type InteractiveClapContextScope = InteractiveClapContextScopeForArgs;
}
impl interactive_clap::FromCli for Args {
    type FromCliContext = ();
    type FromCliError = color_eyre::eyre::Error;
    fn from_cli(
        optional_clap_variant: Option<<Self as interactive_clap::ToCli>::CliVariant>,
        context: Self::FromCliContext,
    ) -> interactive_clap::ResultFromCli<
        <Self as interactive_clap::ToCli>::CliVariant,
        Self::FromCliError,
    >
    where
        Self: Sized + interactive_clap::ToCli,
    {
        let mut clap_variant = optional_clap_variant.clone().unwrap_or_default();
        let env = clap_variant.env.clone();
        let new_context_scope = InteractiveClapContextScopeForArgs {
            env: env.into(),
        };
        interactive_clap::ResultFromCli::Ok(clap_variant)
    }
}

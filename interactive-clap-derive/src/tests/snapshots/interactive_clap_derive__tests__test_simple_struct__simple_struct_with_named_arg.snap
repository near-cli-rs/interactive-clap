---
source: interactive-clap-derive/src/tests/test_simple_struct.rs
expression: pretty_codegen(&interactive_clap_codegen)
---
#[derive(Debug, Default, Clone, clap::Parser, interactive_clap::ToCliArgs)]
#[clap(author, version, about, long_about = None)]
pub struct CliAccount {
    #[clap(subcommand)]
    pub field_name: Option<ClapNamedArgSenderForAccount>,
}
impl interactive_clap::ToCli for Account {
    type CliVariant = CliAccount;
}
impl Account {
    pub fn try_parse() -> Result<CliAccount, clap::Error> {
        <CliAccount as clap::Parser>::try_parse()
    }
    pub fn parse() -> CliAccount {
        <CliAccount as clap::Parser>::parse()
    }
    pub fn try_parse_from<I, T>(itr: I) -> Result<CliAccount, clap::Error>
    where
        I: ::std::iter::IntoIterator<Item = T>,
        T: ::std::convert::Into<::std::ffi::OsString> + ::std::clone::Clone,
    {
        <CliAccount as clap::Parser>::try_parse_from(itr)
    }
}
impl From<Account> for CliAccount {
    fn from(args: Account) -> Self {
        Self {
            field_name: Some(args.field_name.into()),
        }
    }
}
impl Account {}
pub struct InteractiveClapContextScopeForAccount {}
impl interactive_clap::ToInteractiveClapContextScope for Account {
    type InteractiveClapContextScope = InteractiveClapContextScopeForAccount;
}
impl interactive_clap::FromCli for Account {
    type FromCliContext = ();
    type FromCliError = color_eyre::eyre::Error;
    fn from_cli(
        optional_clap_variant: Option<<Self as interactive_clap::ToCli>::CliVariant>,
        context: Self::FromCliContext,
    ) -> interactive_clap::ResultFromCli<
        <Self as interactive_clap::ToCli>::CliVariant,
        Self::FromCliError,
    >
    where
        Self: Sized + interactive_clap::ToCli,
    {
        let mut clap_variant = optional_clap_variant.clone().unwrap_or_default();
        let new_context_scope = InteractiveClapContextScopeForAccount {
        };
        let optional_field = match clap_variant.field_name.take() {
            Some(ClapNamedArgSenderForAccount::FieldName(cli_arg)) => Some(cli_arg),
            None => None,
        };
        match <Sender as interactive_clap::FromCli>::from_cli(
            optional_field,
            context.into(),
        ) {
            interactive_clap::ResultFromCli::Ok(cli_field) => {
                clap_variant
                    .field_name = Some(
                    ClapNamedArgSenderForAccount::FieldName(cli_field),
                );
            }
            interactive_clap::ResultFromCli::Cancel(optional_cli_field) => {
                clap_variant
                    .field_name = optional_cli_field
                    .map(ClapNamedArgSenderForAccount::FieldName);
                return interactive_clap::ResultFromCli::Cancel(Some(clap_variant));
            }
            interactive_clap::ResultFromCli::Back => {
                return interactive_clap::ResultFromCli::Back;
            }
            interactive_clap::ResultFromCli::Err(optional_cli_field, err) => {
                clap_variant
                    .field_name = optional_cli_field
                    .map(ClapNamedArgSenderForAccount::FieldName);
                return interactive_clap::ResultFromCli::Err(Some(clap_variant), err);
            }
        };
        interactive_clap::ResultFromCli::Ok(clap_variant)
    }
}
#[derive(Debug, Clone, clap::Parser, interactive_clap_derive::ToCliArgs)]
pub enum ClapNamedArgSenderForAccount {
    FieldName(<Sender as interactive_clap::ToCli>::CliVariant),
}
impl From<Sender> for ClapNamedArgSenderForAccount {
    fn from(item: Sender) -> Self {
        Self::FieldName(<Sender as interactive_clap::ToCli>::CliVariant::from(item))
    }
}

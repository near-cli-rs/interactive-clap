---
source: interactive-clap-derive/src/tests/test_simple_struct.rs
expression: pretty_codegen(&interactive_clap_codegen)
---
#[derive(Debug, Default, Clone, clap::Parser, interactive_clap::ToCliArgs)]
#[clap(author, version, about, long_about = None)]
pub struct CliViewAccountSummary {
    /// What Account ID do you need to view?
    pub account_id: Option<
        <crate::types::account_id::AccountId as interactive_clap::ToCli>::CliVariant,
    >,
}
impl interactive_clap::ToCli for ViewAccountSummary {
    type CliVariant = CliViewAccountSummary;
}
impl ViewAccountSummary {
    pub fn try_parse() -> Result<CliViewAccountSummary, clap::Error> {
        <CliViewAccountSummary as clap::Parser>::try_parse()
    }
    pub fn parse() -> CliViewAccountSummary {
        <CliViewAccountSummary as clap::Parser>::parse()
    }
    pub fn try_parse_from<I, T>(itr: I) -> Result<CliViewAccountSummary, clap::Error>
    where
        I: ::std::iter::IntoIterator<Item = T>,
        T: ::std::convert::Into<::std::ffi::OsString> + ::std::clone::Clone,
    {
        <CliViewAccountSummary as clap::Parser>::try_parse_from(itr)
    }
}
impl From<ViewAccountSummary> for CliViewAccountSummary {
    fn from(args: ViewAccountSummary) -> Self {
        Self {
            account_id: Some(args.account_id.into()),
        }
    }
}
impl ViewAccountSummary {
    fn input_account_id(
        _context: &(),
    ) -> color_eyre::eyre::Result<Option<crate::types::account_id::AccountId>> {
        match inquire::CustomType::new(
                concat!(r" What Account ID do you need to view?",).trim(),
            )
            .prompt()
        {
            Ok(value) => Ok(Some(value)),
            Err(
                inquire::error::InquireError::OperationCanceled
                | inquire::error::InquireError::OperationInterrupted,
            ) => Ok(None),
            Err(err) => Err(err.into()),
        }
    }
}
pub struct InteractiveClapContextScopeForViewAccountSummary {
    pub account_id: crate::types::account_id::AccountId,
}
impl interactive_clap::ToInteractiveClapContextScope for ViewAccountSummary {
    type InteractiveClapContextScope = InteractiveClapContextScopeForViewAccountSummary;
}
impl interactive_clap::FromCli for ViewAccountSummary {
    type FromCliContext = ();
    type FromCliError = color_eyre::eyre::Error;
    fn from_cli(
        optional_clap_variant: Option<<Self as interactive_clap::ToCli>::CliVariant>,
        context: Self::FromCliContext,
    ) -> interactive_clap::ResultFromCli<
        <Self as interactive_clap::ToCli>::CliVariant,
        Self::FromCliError,
    >
    where
        Self: Sized + interactive_clap::ToCli,
    {
        let mut clap_variant = optional_clap_variant.clone().unwrap_or_default();
        if clap_variant.account_id.is_none() {
            clap_variant
                .account_id = match Self::input_account_id(&context) {
                Ok(Some(account_id)) => Some(account_id),
                Ok(None) => {
                    return interactive_clap::ResultFromCli::Cancel(Some(clap_variant));
                }
                Err(err) => {
                    return interactive_clap::ResultFromCli::Err(Some(clap_variant), err);
                }
            };
        }
        let account_id = clap_variant.account_id.clone().expect("Unexpected error");
        let new_context_scope = InteractiveClapContextScopeForViewAccountSummary {
            account_id: account_id.into(),
        };
        interactive_clap::ResultFromCli::Ok(clap_variant)
    }
}

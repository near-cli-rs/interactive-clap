---
source: interactive-clap-derive/src/tests/test_simple_struct.rs
expression: pretty_codegen(&interactive_clap_codegen)
---
#[derive(Debug, Default, Clone, clap::Parser, interactive_clap::ToCliArgs)]
#[clap(author, version, about, long_about = None)]
pub struct CliArgs {
    #[clap(long)]
    pub offline: bool,
}
impl interactive_clap::ToCli for Args {
    type CliVariant = CliArgs;
}
pub struct InteractiveClapContextScopeForArgs {
    pub offline: bool,
}
impl interactive_clap::ToInteractiveClapContextScope for Args {
    type InteractiveClapContextScope = InteractiveClapContextScopeForArgs;
}
impl interactive_clap::FromCli for Args {
    type FromCliContext = ();
    type FromCliError = color_eyre::eyre::Error;
    fn from_cli(
        optional_clap_variant: Option<<Self as interactive_clap::ToCli>::CliVariant>,
        context: Self::FromCliContext,
    ) -> interactive_clap::ResultFromCli<
        <Self as interactive_clap::ToCli>::CliVariant,
        Self::FromCliError,
    >
    where
        Self: Sized + interactive_clap::ToCli,
    {
        let mut clap_variant = optional_clap_variant.unwrap_or_default();
        let offline = clap_variant.offline.clone();
        let new_context_scope = InteractiveClapContextScopeForArgs {
            offline: offline.into(),
        };
        interactive_clap::ResultFromCli::Ok(clap_variant)
    }
}
impl Args {
    fn input_offline(_context: &()) -> color_eyre::eyre::Result<Option<bool>> {
        match inquire::CustomType::new(concat!(r" Offline mode",).trim()).prompt() {
            Ok(value) => Ok(Some(value)),
            Err(
                inquire::error::InquireError::OperationCanceled
                | inquire::error::InquireError::OperationInterrupted,
            ) => Ok(None),
            Err(err) => Err(err.into()),
        }
    }
    fn try_parse() -> Result<CliArgs, clap::Error> {
        <CliArgs as clap::Parser>::try_parse()
    }
    fn parse() -> CliArgs {
        <CliArgs as clap::Parser>::parse()
    }
}
impl From<Args> for CliArgs {
    fn from(args: Args) -> Self {
        Self {
            offline: args.offline.into(),
        }
    }
}


---
source: interactive-clap-derive/src/tests/test_simple_enum.rs
expression: pretty_codegen(&interactive_clap_codegen)
---
#[derive(Debug, Clone, clap::Parser, interactive_clap::ToCliArgs)]
pub enum CliMode {
    /// Prepare and, optionally, submit a new transaction with online mode
    Network,
    /// Prepare and, optionally, submit a new transaction with offline mode
    Offline,
}
impl interactive_clap::ToCli for Mode {
    type CliVariant = CliMode;
}
pub type InteractiveClapContextScopeForMode = ModeDiscriminants;
impl interactive_clap::ToInteractiveClapContextScope for Mode {
    type InteractiveClapContextScope = InteractiveClapContextScopeForMode;
}
impl From<Mode> for CliMode {
    fn from(command: Mode) -> Self {
        match command {
            Mode::Network => Self::Network,
            Mode::Offline => Self::Offline,
        }
    }
}
impl interactive_clap::FromCli for Mode {
    type FromCliContext = ();
    type FromCliError = color_eyre::eyre::Error;
    fn from_cli(
        mut optional_clap_variant: Option<<Self as interactive_clap::ToCli>::CliVariant>,
        context: Self::FromCliContext,
    ) -> interactive_clap::ResultFromCli<
        <Self as interactive_clap::ToCli>::CliVariant,
        Self::FromCliError,
    >
    where
        Self: Sized + interactive_clap::ToCli,
    {
        loop {
            return match optional_clap_variant {
                Some(CliMode::Network) => {
                    interactive_clap::ResultFromCli::Ok(CliMode::Network)
                }
                Some(CliMode::Offline) => {
                    interactive_clap::ResultFromCli::Ok(CliMode::Offline)
                }
                None => {
                    match Self::choose_variant(context.clone()) {
                        interactive_clap::ResultFromCli::Ok(cli_args) => {
                            optional_clap_variant = Some(cli_args);
                            continue;
                        }
                        result => return result,
                    }
                }
            };
        }
    }
}
impl Mode {
    pub fn choose_variant(
        context: (),
    ) -> interactive_clap::ResultFromCli<
        <Self as interactive_clap::ToCli>::CliVariant,
        <Self as interactive_clap::FromCli>::FromCliError,
    > {}
    pub fn try_parse() -> Result<CliMode, clap::Error> {
        <CliMode as clap::Parser>::try_parse()
    }
    pub fn parse() -> CliMode {
        <CliMode as clap::Parser>::parse()
    }
    pub fn try_parse_from<I, T>(itr: I) -> Result<CliMode, clap::Error>
    where
        I: ::std::iter::IntoIterator<Item = T>,
        T: ::std::convert::Into<::std::ffi::OsString> + ::std::clone::Clone,
    {
        <CliMode as clap::Parser>::try_parse_from(itr)
    }
}

---
source: interactive-clap-derive/src/tests/test_simple_struct.rs
expression: pretty_codegen(&interactive_clap_codegen)
---
#[derive(Debug, Default, Clone, clap::Parser, interactive_clap::ToCliArgs)]
#[clap(author, version, about, long_about = None)]
pub struct CliArgs {
    pub age: Option<<u64 as interactive_clap::ToCli>::CliVariant>,
    pub first_name: Option<<String as interactive_clap::ToCli>::CliVariant>,
    pub second_name: Option<<String as interactive_clap::ToCli>::CliVariant>,
}
impl interactive_clap::ToCli for Args {
    type CliVariant = CliArgs;
}
pub struct InteractiveClapContextScopeForArgs {
    pub age: u64,
    pub first_name: String,
    pub second_name: String,
}
impl interactive_clap::ToInteractiveClapContextScope for Args {
    type InteractiveClapContextScope = InteractiveClapContextScopeForArgs;
}
impl interactive_clap::FromCli for Args {
    type FromCliContext = ();
    type FromCliError = color_eyre::eyre::Error;
    fn from_cli(
        optional_clap_variant: Option<<Self as interactive_clap::ToCli>::CliVariant>,
        context: Self::FromCliContext,
    ) -> interactive_clap::ResultFromCli<
        <Self as interactive_clap::ToCli>::CliVariant,
        Self::FromCliError,
    >
    where
        Self: Sized + interactive_clap::ToCli,
    {
        let mut clap_variant = optional_clap_variant.unwrap_or_default();
        if clap_variant.age.is_none() {
            clap_variant
                .age = match Self::input_age(&context) {
                Ok(Some(age)) => Some(age),
                Ok(None) => {
                    return interactive_clap::ResultFromCli::Cancel(Some(clap_variant));
                }
                Err(err) => {
                    return interactive_clap::ResultFromCli::Err(Some(clap_variant), err);
                }
            };
        }
        let age = clap_variant.age.clone().expect("Unexpected error");
        if clap_variant.first_name.is_none() {
            clap_variant
                .first_name = match Self::input_first_name(&context) {
                Ok(Some(first_name)) => Some(first_name),
                Ok(None) => {
                    return interactive_clap::ResultFromCli::Cancel(Some(clap_variant));
                }
                Err(err) => {
                    return interactive_clap::ResultFromCli::Err(Some(clap_variant), err);
                }
            };
        }
        let first_name = clap_variant.first_name.clone().expect("Unexpected error");
        if clap_variant.second_name.is_none() {
            clap_variant
                .second_name = match Self::input_second_name(&context) {
                Ok(Some(second_name)) => Some(second_name),
                Ok(None) => {
                    return interactive_clap::ResultFromCli::Cancel(Some(clap_variant));
                }
                Err(err) => {
                    return interactive_clap::ResultFromCli::Err(Some(clap_variant), err);
                }
            };
        }
        let second_name = clap_variant.second_name.clone().expect("Unexpected error");
        let new_context_scope = InteractiveClapContextScopeForArgs {
            age: age.into(),
            first_name: first_name.into(),
            second_name: second_name.into(),
        };
        interactive_clap::ResultFromCli::Ok(clap_variant)
    }
}
impl Args {
    fn input_age(_context: &()) -> color_eyre::eyre::Result<Option<u64>> {
        match inquire::CustomType::new("age").prompt() {
            Ok(value) => Ok(Some(value)),
            Err(
                inquire::error::InquireError::OperationCanceled
                | inquire::error::InquireError::OperationInterrupted,
            ) => Ok(None),
            Err(err) => Err(err.into()),
        }
    }
    fn input_first_name(_context: &()) -> color_eyre::eyre::Result<Option<String>> {
        match inquire::CustomType::new("first_name").prompt() {
            Ok(value) => Ok(Some(value)),
            Err(
                inquire::error::InquireError::OperationCanceled
                | inquire::error::InquireError::OperationInterrupted,
            ) => Ok(None),
            Err(err) => Err(err.into()),
        }
    }
    fn input_second_name(_context: &()) -> color_eyre::eyre::Result<Option<String>> {
        match inquire::CustomType::new("second_name").prompt() {
            Ok(value) => Ok(Some(value)),
            Err(
                inquire::error::InquireError::OperationCanceled
                | inquire::error::InquireError::OperationInterrupted,
            ) => Ok(None),
            Err(err) => Err(err.into()),
        }
    }
    fn try_parse() -> Result<CliArgs, clap::Error> {
        <CliArgs as clap::Parser>::try_parse()
    }
    fn parse() -> CliArgs {
        <CliArgs as clap::Parser>::parse()
    }
}
impl From<Args> for CliArgs {
    fn from(args: Args) -> Self {
        Self {
            age: Some(args.age.into()),
            first_name: Some(args.first_name.into()),
            second_name: Some(args.second_name.into()),
        }
    }
}

